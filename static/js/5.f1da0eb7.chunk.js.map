{"version":3,"sources":["firestore/firebase-config.ts","helpers/loadPosts.ts","components/PostCard.styles.ts","hooks/useSendDataToContext.ts","components/PostCard.tsx","components/PaginationPostsButton.tsx","helpers/getPostById.ts","components/postScreen/MainBanner.tsx","components/postScreen/PostContent.tsx","components/postScreen/Sidebar.tsx","screens/PostScreen.tsx","hooks/useGetPostById.ts"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","firestore","lastDocument","loadPosts","a","collection","DbRoot","dbRoot","orderBy","limit","get","postsSnap","docs","length","posts","forEach","snapChild","push","id","data","console","warn","paginationNext","setPosts","setIsPostsLoading","setNoMorePosts","startAfter","postsToConcatenate","arrayOfPosts","Card","styled","div","theme","border_radius","props","imageUrl","palette","card_bg","margin","sidebar","dark","text_gray_dark","Title","h3","posts_card_title","Date","p","text_gray","Excerpt","text_white","useSendDataToContext","useContext","PostContext","useEffect","then","resp","catch","log","PostCard","title","date","excerpt","path","to","className","moment","format","PaginationPosts","LoadPostsContext","noMorePosts","useState","isPostsLoading","style","textAlign","marginTop","marginBottom","height","position","disabled","onClick","getPostById","doc","docRef","Error","message","TitleContainer","BigTitle","h1","MainBanner","PostContainer","main","PurpleBackground","h2","themeMode","primary_text","PostMainContent","PostContent","post","whiteSpace","content","SidebarContainer","aside","sizes","tablet","Sidebar","memo","window","scrollTo","sidebarPosts","useMemo","filter","map","item","itemIdx","phone","Container","body_bg","PostScreen","params","useParams","history","useHistory","setPost","postId","replace","postData","useGetPostById"],"mappings":"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","file":"static/js/5.f1da0eb7.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\nimport 'firebase/auth'\r\n\r\n// var firebaseConfigs = {\r\n//   apiKey: \"AIzaSyDGgRA_or_P7wxc7Ty4HmgaUWTOki5x8Rs\",\r\n//   authDomain: \"blog-ea896.firebaseapp.com\",\r\n//   projectId: \"blog-ea896\",\r\n//   storageBucket: \"blog-ea896.appspot.com\",\r\n//   messagingSenderId: \"798740354455\",\r\n//   appId: \"1:798740354455:web:d30b7cd170351c3822a0d2\"\r\n// };\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDGgRA_or_P7wxc7Ty4HmgaUWTOki5x8Rs\",\r\n  authDomain: \"blog-ea896.firebaseapp.com\",\r\n  projectId: \"blog-ea896\",\r\n  storageBucket: \"blog-ea896.appspot.com\",\r\n  messagingSenderId: \"798740354455\",\r\n  appId: \"1:798740354455:web:d30b7cd170351c3822a0d2\"\r\n};\r\n\r\nconst firebaseConfigTesting = {\r\n  apiKey: 'AIzaSyB7C5OmgXO9-e5vLozqJuMhPJNaZsTnGSo',\r\n  authDomain: 'testing-databases-447ef.firebaseapp.com',\r\n  projectId: 'testing-databases-447ef',\r\n  storageBucket: 'testing-databases-447ef.appspot.com',\r\n  messagingSenderId: '462826107758',\r\n  appId: '1:462826107758:web:37ac34bd90b2898548c77f'\r\n};\r\n\r\nif( process.env.NODE_ENV === 'test' ) {\r\n  // testing\r\n  firebase.initializeApp(firebaseConfigTesting);\r\n} else {\r\n  firebase.initializeApp(firebaseConfig);\r\n}\r\n\r\n\r\n// Initialize Firebase\r\n\r\nconst db = firebase.firestore();\r\n\r\nexport { db, firebase }","import { db } from 'firestore/firebase-config'\r\nimport { IPostCard, DbRoot } from 'types/types'\r\n\r\nlet lastDocument: any\r\nexport const loadPosts: () => Promise<IPostCard[]> = async () => {\r\n   try {\r\n      const postsSnap = await db\r\n         .collection(`${DbRoot.dbRoot}`)\r\n         .orderBy('date', 'desc')\r\n         .limit(2)\r\n         .get()\r\n      lastDocument = postsSnap.docs[postsSnap.docs.length - 1] || null\r\n\r\n      // array of IPostCard\r\n      const posts: any[] = []\r\n\r\n      postsSnap.forEach((snapChild) => {\r\n         posts.push({\r\n            id: snapChild.id,\r\n            ...snapChild.data(),\r\n         })\r\n      })\r\n      return posts\r\n   } catch (error) {\r\n      console.warn(error)\r\n      return []\r\n   }\r\n}\r\n\r\ninterface IPaginationProps {\r\n   (\r\n      posts: IPostCard[],\r\n      setPosts: React.Dispatch<React.SetStateAction<IPostCard[]>>,\r\n      setIsPostsLoading: React.Dispatch<React.SetStateAction<boolean>>,\r\n      setNoMorePosts: React.Dispatch<React.SetStateAction<boolean>>\r\n   ): Promise<void>\r\n}\r\n\r\nexport const paginationNext: IPaginationProps = async (\r\n   posts,\r\n   setPosts,\r\n   setIsPostsLoading,\r\n   setNoMorePosts\r\n) => {\r\n   setIsPostsLoading(true)\r\n   const postsSnap = await db\r\n      .collection(`${DbRoot.dbRoot}`)\r\n      .orderBy('date', 'desc')\r\n      .startAfter(lastDocument)\r\n      .limit(2)\r\n      .get()\r\n\r\n   lastDocument = postsSnap.docs[postsSnap.docs.length - 1] || null\r\n\r\n   const postsToConcatenate: any[] = []\r\n\r\n   postsSnap.forEach((snapChild) => {\r\n      postsToConcatenate.push({\r\n         id: snapChild.id,\r\n         ...snapChild.data(),\r\n      })\r\n   })\r\n\r\n   // giving the type\r\n   const arrayOfPosts: IPostCard[] = postsToConcatenate\r\n\r\n   if (arrayOfPosts.length === 0) {\r\n      setNoMorePosts(true)\r\n   }\r\n   setIsPostsLoading(false)\r\n   setPosts([...posts, ...arrayOfPosts])\r\n}\r\n","import styled from 'styled-components'\r\n// import bgImage from 'theme/img/gon.jpg'\r\n\r\ninterface ICardProps {\r\n   margin?: string\r\n   imageUrl?: string\r\n   sidebar?: boolean\r\n}\r\n\r\nexport const Card = styled.div<ICardProps>`\r\n   border-radius: ${({ theme }) => theme.border_radius};\r\n   background-image: url(${(props) => props.imageUrl});\r\n   background-color: ${({ theme }) => theme.palette.card_bg};\r\n   background-position: center center;\r\n   margin: ${(props) => props.margin || '0 0.7em 1em'};\r\n   background-size: 110%;\r\n   transition: background-size 150ms ease-in-out;\r\n   ${(props) => props.sidebar && `background-size: cover;`}\r\n\r\n   box-shadow: ${({ theme }) =>\r\n      theme.palette.dark ? '1px 1px 4px .5px #494949a2' : '1px 1px 4px .5px black'};\r\n\r\n   &:hover,\r\n   &:focus,\r\n   &:focus-visible,\r\n   &:focus-within {\r\n      ${(props) => !props.sidebar && `background-size: 105%;`}\r\n      box-shadow: ${({ theme }) =>\r\n      theme.palette.dark ? '0 0 5.5px #ffffffba' : '0 0 4px 2px #000'};\r\n   }\r\n\r\n   .card-container {\r\n      outline: none;\r\n      background-color: rgba(0, 0, 0, 0.7);\r\n      border-radius: ${({ theme }) => theme.border_radius || '6px'};\r\n      min-height: 150px;\r\n      color: ${({ theme }) => theme.palette.text_gray_dark};\r\n      cursor: pointer;\r\n      display: block;\r\n      padding: 1em 0.7em;\r\n      transition: background-color 150ms ease;\r\n      &:hover {\r\n         background-color: rgba(0, 0, 0, 0.3);\r\n      }\r\n\r\n      .continue-reading-link {\r\n         font-size: 0.9rem;\r\n         color: lightblue;\r\n      }\r\n   }\r\n`\r\n\r\nexport const Title = styled.h3`\r\n   margin-bottom: 0.6em;\r\n   font-size: 1.4rem;\r\n   color: ${({ theme }) => theme.palette.posts_card_title};\r\n`\r\n\r\nexport const Date = styled.p`\r\n   font-size: 1rem;\r\n   margin-bottom: 0.2em;\r\n   color: ${({ theme }) => theme.palette.text_gray};\r\n`\r\n\r\nexport const Excerpt = styled.p`\r\n   color: ${({ theme }) => theme.palette.text_white};\r\n   margin-bottom: 0.9em;\r\n   font-size: 0.925rem;\r\n`\r\n","import { PostContext } from 'context/PostContext'\r\nimport { loadPosts } from 'helpers/loadPosts'\r\n// import { createExcerpt } from 'data/createExcerpt';\r\n// import { getPostsAsync } from 'data/getPosts';\r\nimport { useContext, useEffect } from 'react'\r\n\r\nexport const useSendDataToContext = () => {\r\n   const { posts, setPosts } = useContext(PostContext)\r\n   // If the posts does not exist on the context, fetch the data, else use the PostContext\r\n\r\n   useEffect(() => {\r\n      if (posts.length < 1) {\r\n         \r\n         loadPosts()\r\n            .then((resp) => {\r\n               setPosts(resp)\r\n            })\r\n            .catch(() => console.log('error obteniendo posts'))\r\n      }\r\n   }, [posts, setPosts])\r\n\r\n   return { posts, setPosts }\r\n}\r\n","import moment from 'moment'\r\nimport { Link } from 'react-router-dom'\r\nimport { IPostCard } from 'types/types'\r\nimport { Card, Title, Date, Excerpt } from './PostCard.styles'\r\n\r\n\r\ntype IProps = IPostCard & { margin?: string; sidebar?: boolean, path: string}\r\n\r\nexport const PostCard: React.FC<IProps> = ({\r\n   title,\r\n   id,\r\n   date,\r\n   excerpt,\r\n\r\n   //routePath\r\n   path,\r\n\r\n   // cardProps\r\n   imageUrl,\r\n   margin,\r\n   sidebar\r\n}) => {\r\n   return (\r\n      <Card sidebar={sidebar} imageUrl={imageUrl} margin={margin}>\r\n         {/* React Router Link */}\r\n         <Link to={path} className=\"card-container\">\r\n            <Title className=\"title\">{title}</Title>\r\n\r\n            {/* <Date className=\"date\">{date}</Date> */}\r\n            <Date className=\"date\">{moment(date).format('MMM Do YY')}</Date>\r\n\r\n            <Excerpt className=\"excerpt\">{excerpt}</Excerpt>\r\n            <p className=\"continue-reading-link\">Continue Reading...</p>\r\n         </Link>\r\n      </Card>\r\n   )\r\n}\r\n","import { Button } from 'components/ui/Button'\r\nimport { LoadPostsContext } from 'context/LoadPostsContext'\r\nimport { PostContext } from 'context/PostContext'\r\nimport { paginationNext } from 'helpers/loadPosts'\r\nimport { useContext, useState, useEffect } from 'react'\r\nimport { Spinner } from './utils/Spinner'\r\n\r\nexport const PaginationPosts: React.FC = () => {\r\n   const { posts, setPosts } = useContext(PostContext)\r\n   const { noMorePosts, setNoMorePosts } = useContext(LoadPostsContext)\r\n   const [isPostsLoading, setIsPostsLoading] = useState(false)\r\n   const handlePagination = () => {\r\n      paginationNext(posts, setPosts, setIsPostsLoading, setNoMorePosts)\r\n   }\r\n   useEffect(() => {\r\n      (posts.length === 0) ? setIsPostsLoading(true) : setIsPostsLoading(false)\r\n   }, [posts.length])\r\n   \r\n   return (\r\n      <div style={{ textAlign: 'center', marginTop: '.25em', marginBottom: '.25em' }}>\r\n\r\n         { isPostsLoading \r\n            // if is fetching posts show the spinner\r\n            ? (\r\n            <div style={{height: '1.8em', position: 'relative'}}>\r\n               <Spinner />\r\n            </div>\r\n            ) \r\n            // else if...\r\n            : (!isPostsLoading && !noMorePosts) \r\n            ? (\r\n               <Button disabled={isPostsLoading} onClick={handlePagination}>\r\n                  Load More posts!\r\n               </Button>\r\n            )\r\n            // else if...\r\n            : (noMorePosts) && (<h4>No more posts</h4>)\r\n\r\n            \r\n         }\r\n         \r\n\r\n      </div>\r\n   )\r\n}\r\n","import { db } from \"firestore/firebase-config\"\r\n\r\nimport { DbRoot } from 'types/types'\r\n\r\n\r\nexport const getPostById = async ( id: string ) => {\r\n   try {\r\n      const docRef = await db.doc(`${DbRoot.dbRoot}/${id}`).get()\r\n      \r\n      if(!docRef.data()) {\r\n         throw new Error('error fetching')   \r\n      }\r\n      \r\n      // convirtiendo la respuesta de firestore en un objecto IPostCardWihoutId\r\n      // const post = docRef.data() as IPostCard;\r\n      // return post\r\n      return docRef\r\n\r\n   } catch (error: Error | any) {\r\n      console.warn(error.message)\r\n      return null\r\n   }\r\n\r\n}","import styled from 'styled-components'\r\n\r\ninterface IStyledTitleProps {\r\n   imageUrl?: string\r\n}\r\n\r\nconst TitleContainer = styled.div<IStyledTitleProps>`\r\n   background-color: ${({theme}) => theme.palette.card_bg};\r\n   background-image: url(${props => props.imageUrl});\r\n   background-position: center center;\r\n   background-size: cover;\r\n   border-radius: ${({theme}) => theme.border_radius || '6px'};\r\n   margin-top: 3.5em;\r\n   margin-bottom: 1.2em;\r\n\r\n   &:hover .blackOverlay {\r\n      background-color: transparent;\r\n   }\r\n\r\n   .blackOverlay {\r\n      transition: background-color 125ms ease;\r\n      background-color: rgba(0,0,0,.5);\r\n      border-radius: ${({theme}) => theme.border_radius || '6px'};\r\n   }\r\n`\r\nconst BigTitle = styled.h1`\r\n   padding: 3em 1em;\r\n   color: ${({theme}) => theme.palette.text_white};\r\n`\r\n\r\ninterface IProps {\r\n   title: string;\r\n   imageUrl?: string\r\n}\r\n\r\nexport const MainBanner: React.FC<IProps> = ({title, imageUrl}) => {\r\n   return (\r\n      <TitleContainer imageUrl={imageUrl}>\r\n         <div className=\"blackOverlay\">\r\n            <BigTitle>{title}</BigTitle>\r\n         </div>\r\n      </TitleContainer>\r\n   )\r\n}\r\n","import moment from 'moment'\r\nimport styled from 'styled-components'\r\nimport { IPostCardWihoutId } from 'types/types'\r\n\r\nconst PostContainer = styled.main`\r\n`\r\nconst PurpleBackground = styled.div`\r\n   padding: 1em;\r\n   background-color: rgba(75, 35, 75, 0.3);\r\n   border-radius: ${({theme}) => theme.border_radius || '6px'};\r\n`\r\n\r\nconst Title = styled.h2`\r\n   color: ${({theme}) => theme.palette.themeMode.primary_text};\r\n   margin-bottom: .6em;\r\n`\r\n\r\nconst Date = styled.p`\r\n   margin: .5em 0;\r\n`\r\n\r\nconst PostMainContent = styled.div`\r\n   margin-bottom: 1em;\r\n   div * {\r\n      color: green;\r\n   }\r\n`\r\n\r\ninterface IProps {\r\n   post: IPostCardWihoutId\r\n}\r\n\r\nexport const PostContent: React.FC<IProps> = ({post}) => {\r\n   return (\r\n      <PostContainer>\r\n         <PurpleBackground>\r\n            <Title>{post.title}</Title>\r\n            <hr />\r\n            <Date className=\"date\">{moment(post.date).format('MMM Do YY')}</Date>\r\n            <PostMainContent>\r\n               {/* <div style={{whiteSpace: 'pre'}}> */}\r\n               <div style={{whiteSpace: 'break-spaces'}}>\r\n                  {post.content}\r\n\r\n               </div>\r\n            </PostMainContent>\r\n            <hr />\r\n            \r\n            <div className=\"comments\">\r\n            </div>\r\n         </PurpleBackground>\r\n      </PostContainer>\r\n   )\r\n}\r\n","import styled from 'styled-components'\r\nimport { useEffect, useMemo, memo } from 'react'\r\nimport { useSendDataToContext } from 'hooks/useSendDataToContext'\r\n\r\nimport { PostCard } from 'components/PostCard'\r\nimport { GridCol, GridContainer, sizes } from 'theme/grid'\r\nimport { Card } from 'components/PostCard.styles'\r\n\r\n// import { scrollY } from 'helpers/scrollToTop'\r\n\r\nimport { IPostCard } from 'types/types'\r\nimport { PaginationPosts } from 'components/PaginationPostsButton'\r\n\r\n// styled-comp\r\nconst SidebarContainer = styled.aside`\r\n   margin-top: 1.2em;\r\n\r\n   @media (min-width: ${sizes.tablet}px) {\r\n      margin-left: 0.8rem;\r\n      margin-top: 0;\r\n   }\r\n`\r\n\r\ninterface IProps {\r\n   id: string\r\n}\r\n\r\n// FC\r\nexport const Sidebar: React.FC<IProps> = memo(({ id }) => {\r\n\r\n   useEffect(() => {\r\n      window.scrollTo(0,0)\r\n   }, [id])\r\n\r\n   // If the posts does not exist on the context, fetch the data, else use the PostContext\r\n   const { posts } = useSendDataToContext()\r\n\r\n   // memoize the function to don't call it unnecesarily\r\n   const sidebarPosts = useMemo(() => {\r\n      return posts.filter((post) => post.id !== id)\r\n   }, [posts, id])\r\n\r\n   return (\r\n      <SidebarContainer className=\"sidebar\">\r\n         <GridContainer>\r\n            {\r\n               sidebarPosts.length < 1\r\n                  ? (\r\n                     [1, 2].map((item, itemIdx) => (\r\n                        <GridCol key={itemIdx} phone={12}>\r\n                           <Card margin=\"0 0 1em 0\">\r\n                              <div className=\"card-container\"></div>\r\n                           </Card>\r\n                        </GridCol>\r\n                     ))\r\n                  )\r\n                  : (\r\n                     sidebarPosts.map((post: IPostCard) => (\r\n                        <GridCol key={post.id} phone={12}>\r\n                           <PostCard path={`/post/${post.id}`} sidebar={true} margin=\"0 0 1em 0\" {...post} />\r\n                        </GridCol>\r\n                     ))\r\n                  )\r\n            }\r\n            <GridCol phone={12}>\r\n               <PaginationPosts />\r\n            </GridCol>     \r\n         </GridContainer>\r\n      </SidebarContainer>\r\n   )\r\n})\r\n","import styled from 'styled-components'\r\nimport { useParams } from 'react-router-dom'\r\nimport { IURLparams } from 'types/types'\r\n\r\nimport { MainBanner } from 'components/postScreen/MainBanner'\r\nimport { PostContent } from 'components/postScreen/PostContent'\r\nimport { Sidebar } from 'components/postScreen/Sidebar'\r\nimport { GridCol, GridContainer } from 'theme/grid'\r\nimport { useGetPostById } from 'hooks/useGetPostById'\r\n\r\nconst Container = styled.div`\r\n   background-color: ${(props) => props.theme.palette.themeMode.body_bg};\r\n   padding: 1em 0;\r\n   max-width: 94vw;\r\n   margin: 0 auto;\r\n   min-height: 110vh;\r\n\r\n   @media (min-width: 992px) {\r\n      max-width: 85vw;\r\n   }\r\n`\r\n// This is the functional Component\r\nconst PostScreen: React.FC = () => {\r\n   const params = useParams<IURLparams>()\r\n\r\n   const { post } = useGetPostById()\r\n   return (\r\n      <Container>\r\n         {/* <ScrollToTop /> */}\r\n         {\r\n            // if post is loaded\r\n            (post)\r\n            ? <MainBanner imageUrl={post.imageUrl} title={post.title} />\r\n            : (\r\n               <div style={{marginTop: '3.5rem'}}>\r\n                  <MainBanner title=\"Loading...\" />\r\n               </div>\r\n            )         \r\n         }\r\n         \r\n\r\n         <GridContainer className=\"post\">\r\n            <GridCol tablet={9}>\r\n               {\r\n                  (post)\r\n                  ? <PostContent post={post} />\r\n                  : <div>loading</div>\r\n               }\r\n               \r\n            </GridCol>\r\n\r\n            <GridCol tablet={3}>\r\n               <Sidebar id={params.postId} />\r\n            </GridCol>\r\n         </GridContainer>\r\n      </Container>\r\n   )\r\n}\r\n\r\nexport default PostScreen\r\n","import { getPostById } from 'helpers/getPostById'\r\nimport { useEffect, useState } from 'react'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport { IURLparams, IPostCardWihoutId } from 'types/types'\r\n\r\nexport const useGetPostById = () => {\r\n   const history = useHistory()\r\n   const [post, setPost] = useState<IPostCardWihoutId | null | undefined>(null)\r\n   const params = useParams<IURLparams>()\r\n\r\n   useEffect(() => {\r\n      setPost(null)\r\n      getPostById(params.postId).then((resp) => {\r\n         if (resp === null) history.replace('/')\r\n\r\n         // the value that will return this hook\r\n         const postData = resp?.data() as IPostCardWihoutId\r\n         setPost(postData)\r\n         \r\n      })\r\n      return () => {}\r\n   }, [params.postId, history])\r\n\r\n   return { post, setPost }\r\n\r\n}\r\n"],"sourceRoot":""}