{"version":3,"sources":["firestore/firebase-config.ts","helpers/loadPosts.ts","components/PostCard.styles.ts","hooks/useSendDataToContext.ts","components/PostCard.tsx","components/PaginationPostsButton.tsx","helpers/getPostById.ts","admin/types/types.ts","admin/components/Layout.tsx","hooks/useForm.ts","admin/components/Form.tsx","admin/CRUD/createPost.ts","admin/CreatePostScreen.tsx","admin/auth/loggout.ts","admin/components/AdminHeader.tsx","admin/components/Sidebar.tsx","admin/CRUD/deletePost.ts","admin/CRUD/updatePost.ts","admin/UpdatePostScreen.tsx","admin/components/UpdateScreenLoading.tsx","admin/router/Router.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","router/PrivateRoute.tsx","router/PublicRoute.tsx","admin/LoginScreen.tsx","admin/auth/login.ts","router/AdminRoute.tsx"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","firestore","lastDocument","loadPosts","a","collection","DbRoot","dbRoot","orderBy","limit","get","postsSnap","docs","length","posts","forEach","snapChild","push","id","data","console","warn","paginationNext","setPosts","setIsPostsLoading","setNoMorePosts","startAfter","postsToConcatenate","arrayOfPosts","Card","styled","div","theme","border_radius","props","imageUrl","palette","card_bg","margin","sidebar","dark","text_gray_dark","Title","h3","posts_card_title","Date","p","text_gray","Excerpt","text_white","useSendDataToContext","useContext","PostContext","useEffect","then","resp","catch","log","PostCard","title","date","excerpt","path","to","className","moment","format","PaginationPosts","LoadPostsContext","noMorePosts","useState","isPostsLoading","style","textAlign","marginTop","marginBottom","height","position","disabled","onClick","getPostById","doc","docRef","Error","message","Paths","LayoutDiv","themeMode","body_bg","Layout","children","useForm","initialState","values","setValues","e","target","name","value","SForm","form","Form","memo","formValues","handleInputChange","submitCallback","resetForm","postId","successMessage","setSuccessMessage","content","onSubmit","preventDefault","success","setTimeout","onChange","autoComplete","type","placeholder","cols","rows","htmlFor","defaultChecked","Button","createPost","post","newPost","getTime","add","CreatePostScreen","featured","reset","startLoggout","auth","signOut","Header","Navigation","nav","GreenButton","YellowButton","AdminHeader","SidebarContainer","aside","sizes","tablet","AdminSidebar","map","item","itemIdx","phone","startDeletePost","history","delete","window","location","reload","updatePost","updatedPost","update","RedButton","UpdatePostScreen","useHistory","initialFormState","UpdateScreenLoading","postLoaded","setPostLoaded","params","useParams","postRef","scrollTo","Router","exact","create","component","marginLeft","_objectWithoutProperties","source","excluded","key","i","sourceKeys","Object","keys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","PrivateRoute","isAuthenticated","Component","rest","login","PublicRoute","Container","LoginDiv","navbar_bg","Input","input","ButtonBlock","LoginScreen","email","password","signInWithEmailAndPassword","err","startLogin","AdminRoute","checking","setChecking","isLoggedIn","setIsLoggedIn","onAuthStateChanged","user","uid","paddingTop"],"mappings":"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","file":"static/js/4.130624d9.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\nimport 'firebase/auth'\r\n\r\n// var firebaseConfigs = {\r\n//   apiKey: \"AIzaSyDGgRA_or_P7wxc7Ty4HmgaUWTOki5x8Rs\",\r\n//   authDomain: \"blog-ea896.firebaseapp.com\",\r\n//   projectId: \"blog-ea896\",\r\n//   storageBucket: \"blog-ea896.appspot.com\",\r\n//   messagingSenderId: \"798740354455\",\r\n//   appId: \"1:798740354455:web:d30b7cd170351c3822a0d2\"\r\n// };\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDGgRA_or_P7wxc7Ty4HmgaUWTOki5x8Rs\",\r\n  authDomain: \"blog-ea896.firebaseapp.com\",\r\n  projectId: \"blog-ea896\",\r\n  storageBucket: \"blog-ea896.appspot.com\",\r\n  messagingSenderId: \"798740354455\",\r\n  appId: \"1:798740354455:web:d30b7cd170351c3822a0d2\"\r\n};\r\n\r\nconst firebaseConfigTesting = {\r\n  apiKey: 'AIzaSyB7C5OmgXO9-e5vLozqJuMhPJNaZsTnGSo',\r\n  authDomain: 'testing-databases-447ef.firebaseapp.com',\r\n  projectId: 'testing-databases-447ef',\r\n  storageBucket: 'testing-databases-447ef.appspot.com',\r\n  messagingSenderId: '462826107758',\r\n  appId: '1:462826107758:web:37ac34bd90b2898548c77f'\r\n};\r\n\r\nif( process.env.NODE_ENV === 'test' ) {\r\n  // testing\r\n  firebase.initializeApp(firebaseConfigTesting);\r\n} else {\r\n  firebase.initializeApp(firebaseConfig);\r\n}\r\n\r\n\r\n// Initialize Firebase\r\n\r\nconst db = firebase.firestore();\r\n\r\nexport { db, firebase }","import { db } from 'firestore/firebase-config'\r\nimport { IPostCard, DbRoot } from 'types/types'\r\n\r\nlet lastDocument: any\r\nexport const loadPosts: () => Promise<IPostCard[]> = async () => {\r\n   try {\r\n      const postsSnap = await db\r\n         .collection(`${DbRoot.dbRoot}`)\r\n         .orderBy('date', 'desc')\r\n         .limit(2)\r\n         .get()\r\n      lastDocument = postsSnap.docs[postsSnap.docs.length - 1] || null\r\n\r\n      // array of IPostCard\r\n      const posts: any[] = []\r\n\r\n      postsSnap.forEach((snapChild) => {\r\n         posts.push({\r\n            id: snapChild.id,\r\n            ...snapChild.data(),\r\n         })\r\n      })\r\n      return posts\r\n   } catch (error) {\r\n      console.warn(error)\r\n      return []\r\n   }\r\n}\r\n\r\ninterface IPaginationProps {\r\n   (\r\n      posts: IPostCard[],\r\n      setPosts: React.Dispatch<React.SetStateAction<IPostCard[]>>,\r\n      setIsPostsLoading: React.Dispatch<React.SetStateAction<boolean>>,\r\n      setNoMorePosts: React.Dispatch<React.SetStateAction<boolean>>\r\n   ): Promise<void>\r\n}\r\n\r\nexport const paginationNext: IPaginationProps = async (\r\n   posts,\r\n   setPosts,\r\n   setIsPostsLoading,\r\n   setNoMorePosts\r\n) => {\r\n   setIsPostsLoading(true)\r\n   const postsSnap = await db\r\n      .collection(`${DbRoot.dbRoot}`)\r\n      .orderBy('date', 'desc')\r\n      .startAfter(lastDocument)\r\n      .limit(2)\r\n      .get()\r\n\r\n   lastDocument = postsSnap.docs[postsSnap.docs.length - 1] || null\r\n\r\n   const postsToConcatenate: any[] = []\r\n\r\n   postsSnap.forEach((snapChild) => {\r\n      postsToConcatenate.push({\r\n         id: snapChild.id,\r\n         ...snapChild.data(),\r\n      })\r\n   })\r\n\r\n   // giving the type\r\n   const arrayOfPosts: IPostCard[] = postsToConcatenate\r\n\r\n   if (arrayOfPosts.length === 0) {\r\n      setNoMorePosts(true)\r\n   }\r\n   setIsPostsLoading(false)\r\n   setPosts([...posts, ...arrayOfPosts])\r\n}\r\n","import styled from 'styled-components'\r\n// import bgImage from 'theme/img/gon.jpg'\r\n\r\ninterface ICardProps {\r\n   margin?: string\r\n   imageUrl?: string\r\n   sidebar?: boolean\r\n}\r\n\r\nexport const Card = styled.div<ICardProps>`\r\n   border-radius: ${({ theme }) => theme.border_radius};\r\n   background-image: url(${(props) => props.imageUrl});\r\n   background-color: ${({ theme }) => theme.palette.card_bg};\r\n   background-position: center center;\r\n   margin: ${(props) => props.margin || '0 0.7em 1em'};\r\n   background-size: 110%;\r\n   transition: background-size 150ms ease-in-out;\r\n   ${(props) => props.sidebar && `background-size: cover;`}\r\n\r\n   box-shadow: ${({ theme }) =>\r\n      theme.palette.dark ? '1px 1px 4px .5px #494949a2' : '1px 1px 4px .5px black'};\r\n\r\n   &:hover,\r\n   &:focus,\r\n   &:focus-visible,\r\n   &:focus-within {\r\n      ${(props) => !props.sidebar && `background-size: 105%;`}\r\n      box-shadow: ${({ theme }) =>\r\n      theme.palette.dark ? '0 0 5.5px #ffffffba' : '0 0 4px 2px #000'};\r\n   }\r\n\r\n   .card-container {\r\n      outline: none;\r\n      background-color: rgba(0, 0, 0, 0.7);\r\n      border-radius: ${({ theme }) => theme.border_radius || '6px'};\r\n      min-height: 150px;\r\n      color: ${({ theme }) => theme.palette.text_gray_dark};\r\n      cursor: pointer;\r\n      display: block;\r\n      padding: 1em 0.7em;\r\n      transition: background-color 150ms ease;\r\n      &:hover {\r\n         background-color: rgba(0, 0, 0, 0.3);\r\n      }\r\n\r\n      .continue-reading-link {\r\n         font-size: 0.9rem;\r\n         color: lightblue;\r\n      }\r\n   }\r\n`\r\n\r\nexport const Title = styled.h3`\r\n   margin-bottom: 0.6em;\r\n   font-size: 1.4rem;\r\n   color: ${({ theme }) => theme.palette.posts_card_title};\r\n`\r\n\r\nexport const Date = styled.p`\r\n   font-size: 1rem;\r\n   margin-bottom: 0.2em;\r\n   color: ${({ theme }) => theme.palette.text_gray};\r\n`\r\n\r\nexport const Excerpt = styled.p`\r\n   color: ${({ theme }) => theme.palette.text_white};\r\n   margin-bottom: 0.9em;\r\n   font-size: 0.925rem;\r\n`\r\n","import { PostContext } from 'context/PostContext'\r\nimport { loadPosts } from 'helpers/loadPosts'\r\n// import { createExcerpt } from 'data/createExcerpt';\r\n// import { getPostsAsync } from 'data/getPosts';\r\nimport { useContext, useEffect } from 'react'\r\n\r\nexport const useSendDataToContext = () => {\r\n   const { posts, setPosts } = useContext(PostContext)\r\n   // If the posts does not exist on the context, fetch the data, else use the PostContext\r\n\r\n   useEffect(() => {\r\n      if (posts.length < 1) {\r\n         \r\n         loadPosts()\r\n            .then((resp) => {\r\n               setPosts(resp)\r\n            })\r\n            .catch(() => console.log('error obteniendo posts'))\r\n      }\r\n   }, [posts, setPosts])\r\n\r\n   return { posts, setPosts }\r\n}\r\n","import moment from 'moment'\r\nimport { Link } from 'react-router-dom'\r\nimport { IPostCard } from 'types/types'\r\nimport { Card, Title, Date, Excerpt } from './PostCard.styles'\r\n\r\n\r\ntype IProps = IPostCard & { margin?: string; sidebar?: boolean, path: string}\r\n\r\nexport const PostCard: React.FC<IProps> = ({\r\n   title,\r\n   id,\r\n   date,\r\n   excerpt,\r\n\r\n   //routePath\r\n   path,\r\n\r\n   // cardProps\r\n   imageUrl,\r\n   margin,\r\n   sidebar\r\n}) => {\r\n   return (\r\n      <Card sidebar={sidebar} imageUrl={imageUrl} margin={margin}>\r\n         {/* React Router Link */}\r\n         <Link to={path} className=\"card-container\">\r\n            <Title className=\"title\">{title}</Title>\r\n\r\n            {/* <Date className=\"date\">{date}</Date> */}\r\n            <Date className=\"date\">{moment(date).format('MMM Do YY')}</Date>\r\n\r\n            <Excerpt className=\"excerpt\">{excerpt}</Excerpt>\r\n            <p className=\"continue-reading-link\">Continue Reading...</p>\r\n         </Link>\r\n      </Card>\r\n   )\r\n}\r\n","import { Button } from 'components/ui/Button'\r\nimport { LoadPostsContext } from 'context/LoadPostsContext'\r\nimport { PostContext } from 'context/PostContext'\r\nimport { paginationNext } from 'helpers/loadPosts'\r\nimport { useContext, useState, useEffect } from 'react'\r\nimport { Spinner } from './utils/Spinner'\r\n\r\nexport const PaginationPosts: React.FC = () => {\r\n   const { posts, setPosts } = useContext(PostContext)\r\n   const { noMorePosts, setNoMorePosts } = useContext(LoadPostsContext)\r\n   const [isPostsLoading, setIsPostsLoading] = useState(false)\r\n   const handlePagination = () => {\r\n      paginationNext(posts, setPosts, setIsPostsLoading, setNoMorePosts)\r\n   }\r\n   useEffect(() => {\r\n      (posts.length === 0) ? setIsPostsLoading(true) : setIsPostsLoading(false)\r\n   }, [posts.length])\r\n   \r\n   return (\r\n      <div style={{ textAlign: 'center', marginTop: '.25em', marginBottom: '.25em' }}>\r\n\r\n         { isPostsLoading \r\n            // if is fetching posts show the spinner\r\n            ? (\r\n            <div style={{height: '1.8em', position: 'relative'}}>\r\n               <Spinner />\r\n            </div>\r\n            ) \r\n            // else if...\r\n            : (!isPostsLoading && !noMorePosts) \r\n            ? (\r\n               <Button disabled={isPostsLoading} onClick={handlePagination}>\r\n                  Load More posts!\r\n               </Button>\r\n            )\r\n            // else if...\r\n            : (noMorePosts) && (<h4>No more posts</h4>)\r\n\r\n            \r\n         }\r\n         \r\n\r\n      </div>\r\n   )\r\n}\r\n","import { db } from \"firestore/firebase-config\"\r\n\r\nimport { DbRoot } from 'types/types'\r\n\r\n\r\nexport const getPostById = async ( id: string ) => {\r\n   try {\r\n      const docRef = await db.doc(`${DbRoot.dbRoot}/${id}`).get()\r\n      \r\n      if(!docRef.data()) {\r\n         throw new Error('error fetching')   \r\n      }\r\n      \r\n      // convirtiendo la respuesta de firestore en un objecto IPostCardWihoutId\r\n      // const post = docRef.data() as IPostCard;\r\n      // return post\r\n      return docRef\r\n\r\n   } catch (error: Error | any) {\r\n      console.warn(error.message)\r\n      return null\r\n   }\r\n\r\n}","\r\nexport interface AdminUrlParams {\r\n   postId: 'postId'\r\n}\r\nexport enum Paths {\r\n   login = '/admin/login',\r\n   create = '/admin/create',\r\n   update = '/admin/update/:postId',\r\n   delete = '/admin/delete'\r\n}\r\n\r\nexport interface IFormProps {\r\n   title: string;\r\n   content: string;\r\n   excerpt: string;\r\n   imageUrl?: string;\r\n   featured?: 'true' | 'false';\r\n}\r\n\r\nexport type TCreatePost = IFormProps & { date: string | number }\r\n","import styled from 'styled-components'\r\n\r\nconst LayoutDiv = styled.div`\r\n   background-color: ${(props) => props.theme.palette.themeMode.body_bg};\r\n   padding: 1em 0;\r\n   max-width: 94vw;\r\n   margin: 0 auto;\r\n   padding-top: 10vh;\r\n   min-height: 86.6vh;\r\n\r\n   @media (min-width: 992px) {\r\n      max-width: 85vw;\r\n   }\r\n`\r\n\r\n// TODO: crear un SIdebar \r\nexport const Layout: React.FC = ({ children }) => {\r\n   return (\r\n      <LayoutDiv>\r\n         {children}\r\n      </LayoutDiv>\r\n   )\r\n}\r\n","import { useState } from 'react'\r\n\r\ntype FormProps<T> = [\r\n   T,\r\n   (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void,\r\n   () => void\r\n]\r\n\r\nexport const useForm = <T>( initialState: T ): FormProps<T>  => {\r\n\r\n   const [values, setValues] = useState(initialState)\r\n\r\n   const reset = () => {\r\n      setValues(initialState)\r\n   }\r\n\r\n   const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n      setValues({\r\n         ...values,\r\n         [e.target.name]: e.target.value\r\n      })\r\n   }\r\n\r\n   return [values, handleInputChange, reset]\r\n\r\n}\r\n","import styled from 'styled-components'\r\nimport { IFormProps } from 'admin/types/types'\r\nimport { Button } from 'components/ui/Button'\r\nimport { memo } from 'react'\r\nimport { useState } from 'react'\r\n\r\nconst SForm = styled.form`\r\n   input {\r\n      width: 100%;\r\n      font-size: 1.025rem;\r\n      margin-bottom: 0.75em;\r\n   }\r\n   .content textarea {\r\n      width: 100%;\r\n      font-size: 0.82rem;\r\n   }\r\n\r\n   .featured > div {\r\n      label,\r\n      input {\r\n         display: block;\r\n         width: 100%;\r\n         text-align: center;\r\n         cursor: pointer;\r\n      }\r\n      &:first-of-type {\r\n         border-bottom: 1px solid whitesmoke;\r\n      }\r\n   }\r\n`\r\n\r\ninterface Props {\r\n   formValues: IFormProps\r\n   handleInputChange: (\r\n      e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n   ) => void\r\n   submitCallback(post: IFormProps, postId?: string): Promise<void | true | undefined>\r\n   resetForm?(): void\r\n   postId?: string\r\n}\r\n\r\nexport const Form: React.FC<Props> = memo(({\r\n   formValues,\r\n   handleInputChange,\r\n   submitCallback,\r\n   resetForm,\r\n   postId,\r\n}) => {\r\n   const [successMessage, setSuccessMessage] = useState(false)\r\n   const { title, content, excerpt, imageUrl } = formValues\r\n\r\n   const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n      e.preventDefault()\r\n      if (\r\n         title === '' ||\r\n         content === '' ||\r\n         excerpt === '' ||\r\n         title.length < 5 ||\r\n         content.length < 5 ||\r\n         excerpt.length < 5\r\n      ) {\r\n         console.warn('Invalid Inputs')\r\n         return\r\n      }\r\n\r\n      //update post\r\n      if(postId) submitCallback(formValues, postId)\r\n      else {\r\n         //create post\r\n         (async() => {\r\n            const success = await submitCallback(formValues)\r\n            if (resetForm && success) {\r\n               resetForm()\r\n               setSuccessMessage(true)\r\n               setTimeout(() => {\r\n                  setSuccessMessage(false)\r\n               }, 3000);\r\n            }\r\n         })()\r\n      }\r\n\r\n      \r\n   }\r\n\r\n   return (\r\n      <div>\r\n         {\r\n            successMessage &&\r\n            <h4>Success!!</h4>\r\n         }\r\n         <SForm onSubmit={handleSubmit}>\r\n            <div className=\"title\">\r\n               <input\r\n                  onChange={handleInputChange}\r\n                  autoComplete=\"off\"\r\n                  name=\"title\"\r\n                  value={title}\r\n                  type=\"text\"\r\n                  placeholder=\"title\"\r\n               />\r\n            </div>\r\n\r\n            <div className=\"content\">\r\n               <textarea\r\n                  onChange={handleInputChange}\r\n                  value={content}\r\n                  name=\"content\"\r\n                  id=\"content\"\r\n                  cols={30}\r\n                  rows={10}\r\n               ></textarea>\r\n            </div>\r\n            <div className=\"excerpt\">\r\n               <p>content</p>\r\n               <input\r\n                  onChange={handleInputChange}\r\n                  name=\"excerpt\"\r\n                  value={excerpt}\r\n                  type=\"text\"\r\n                  placeholder=\"excerpt\"\r\n               />\r\n            </div>\r\n\r\n            <div className=\"imageUrl\">\r\n               <input\r\n                  onChange={handleInputChange}\r\n                  name=\"imageUrl\"\r\n                  value={imageUrl}\r\n                  type=\"text\"\r\n                  placeholder=\"imageUrl\"\r\n               />\r\n            </div>\r\n            <div className=\"featured\">\r\n               <p>featured post?</p>\r\n               <hr />\r\n               <div>\r\n                  <label htmlFor=\"true\">true</label>\r\n                  <input\r\n                     value=\"true\"\r\n                     onChange={handleInputChange}\r\n                     type=\"radio\"\r\n                     name=\"featured\"\r\n                     id=\"true\"\r\n                  />\r\n               </div>\r\n               <div>\r\n                  <label htmlFor=\"false\">false</label>\r\n                  <input\r\n                     value=\"false\"\r\n                     onChange={handleInputChange}\r\n                     defaultChecked\r\n                     type=\"radio\"\r\n                     name=\"featured\"\r\n                     id=\"false\"\r\n                  />\r\n               </div>\r\n            </div>\r\n            <Button type=\"submit\">Submit form</Button>\r\n         </SForm>\r\n      </div>\r\n   )\r\n})\r\n","import { db } from 'firestore/firebase-config'\r\nimport { TCreatePost, IFormProps } from 'admin/types/types'\r\nimport { DbRoot } from 'types/types'\r\n// import moment from 'moment'\r\n\r\n\r\n// post: IFormProps\r\nexport const createPost: (post: IFormProps) => Promise<true | undefined> = async (post) => {\r\n   try {\r\n      const newPost: TCreatePost = {\r\n         ...post,\r\n         // date: moment().format('MMM Do YY'),\r\n         date: new Date().getTime(),\r\n      }\r\n      await db.collection(`${DbRoot.dbRoot}`).add( newPost )\r\n      console.log('created')\r\n      return true\r\n   } catch (error) {\r\n      console.warn('error creating post')\r\n   }\r\n}\r\n","import { useForm } from 'hooks/useForm'\r\nimport { Form } from './components/Form'\r\nimport { IFormProps } from 'admin/types/types'\r\nimport { createPost } from './CRUD/createPost'\r\n\r\nexport const CreatePostScreen: React.FC = () => {\r\n   const initialFormState: IFormProps = {\r\n      title: '',\r\n      content: '',\r\n      excerpt: '',\r\n      imageUrl: '',\r\n      featured: 'false'\r\n   }\r\n\r\n   const [formValues, handleInputChange, reset] = useForm(initialFormState)\r\n\r\n   return (\r\n      <div>\r\n         <hr />\r\n         <p style={{margin: '.3em 0', textAlign: 'center'}}>CREATE POST SCREEN</p>\r\n         <hr />\r\n         <Form\r\n            formValues={formValues}\r\n            handleInputChange={handleInputChange}\r\n            submitCallback={createPost}\r\n            resetForm={reset}\r\n         />\r\n      </div>\r\n   )\r\n}\r\n","import { firebase } from 'firestore/firebase-config'\r\n\r\nexport const startLoggout = async () => {\r\n   try {\r\n      await firebase.auth().signOut()\r\n   } catch (error) {\r\n      console.warn('something wrong happened')\r\n   }\r\n}\r\n","import { startLoggout } from 'admin/auth/loggout'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button } from 'components/ui/Button'\r\nimport styled from 'styled-components'\r\n\r\nconst Header = styled.div`\r\n   display: flex;\r\n   align-items: center;\r\n   justify-content: space-between;\r\n   margin: .5em 0;\r\n`\r\n\r\nconst Navigation = styled.nav`\r\n   ul {\r\n      display: flex;\r\n      flex-wrap: wrap;\r\n      justify-content: space-between;\r\n      padding: 0;\r\n      margin: 0;\r\n      list-style: none;\r\n\r\n      li {\r\n         margin: .5em 0;\r\n      }\r\n   }\r\n`\r\n\r\n\r\nconst GreenButton = styled(Button)`\r\n   background: rgb(49, 162, 76);\r\n   color: ${({theme}) => theme.palette.text_white};\r\n`\r\n// const BlueButton = styled(Button)`\r\n//    background: rgb(45, 136, 255);\r\n//    color: ${({theme}) => theme.palette.text_white};\r\n// `\r\nconst YellowButton = styled(Button)`\r\n   background: hsl(40, 89%, 52%);\r\n   color: ${({theme}) => theme.palette.text_white};\r\n`\r\n\r\n\r\n\r\nexport const AdminHeader: React.FC = () => {\r\n   return (\r\n      <div>\r\n         <Header>\r\n            <h1>Admin page</h1>\r\n            {/* <small>open devTools console</small> */}\r\n            <YellowButton onClick={startLoggout} type=\"button\">\r\n               Logout\r\n            </YellowButton>\r\n         </Header>\r\n         <hr />\r\n\r\n         <Navigation className=\"admin-nav\">\r\n            <ul>\r\n               <li>\r\n                  <Link to=\"/admin/create\">\r\n                     <GreenButton>Create</GreenButton>\r\n                  </Link>\r\n               </li>\r\n               <li>\r\n\r\n               </li>\r\n               <li><Button>Posts</Button></li>\r\n            </ul>\r\n         </Navigation>\r\n         <hr />\r\n         <br />\r\n      </div>\r\n   )\r\n}\r\n","import { PostCard } from 'components/PostCard'\r\nimport styled from 'styled-components'\r\nimport { GridContainer, sizes, GridCol } from 'theme/grid'\r\nimport { IPostCard } from 'types/types'\r\nimport { Card } from 'components/PostCard.styles'\r\nimport { useSendDataToContext } from 'hooks/useSendDataToContext'\r\nimport { memo } from 'react'\r\nimport { PaginationPosts } from 'components/PaginationPostsButton'\r\n\r\n\r\nconst SidebarContainer = styled.aside`\r\n   margin-top: 1.2em;\r\n\r\n   @media (min-width: ${sizes.tablet}px) {\r\n      margin-left: 0.8rem;\r\n      margin-top: 0;\r\n   }\r\n`\r\n// ! ADMINSIDEBAR\r\nexport const AdminSidebar: React.FC = memo(() => {\r\n\r\n   const { posts } = useSendDataToContext()\r\n\r\n   return (\r\n      <SidebarContainer className=\"sidebar\">\r\n         <GridContainer>\r\n            {posts.length < 1\r\n               ? [1, 2, 3, 4].map((item, itemIdx) => (\r\n                    <GridCol key={itemIdx} phone={12}>\r\n                       <Card margin=\"0 0 1em 0\">\r\n                          <div className=\"card-container\"></div>\r\n                       </Card>\r\n                    </GridCol>\r\n                 ))\r\n               : posts.map((post: IPostCard) => (\r\n                    <GridCol key={post.id} phone={12}>\r\n                       <PostCard path={`/admin/update/${post.id}`} sidebar={true} margin=\"0 0 1em 0\" {...post} />\r\n                    </GridCol>\r\n                 ))}\r\n            <GridCol phone={12}>\r\n               <PaginationPosts />\r\n            </GridCol>   \r\n         </GridContainer>\r\n      </SidebarContainer>\r\n   )\r\n})","import { db } from \"firestore/firebase-config\"\r\n\r\n\r\nexport const startDeletePost = async(id: string, history: any) => {\r\n   try {\r\n      await db.doc(`posts/${id}`).delete()\r\n      history.push('/admin/create')\r\n      console.log('deleted post')\r\n      window.location.reload()\r\n      \r\n   } catch (error) {\r\n      console.log('error deleting the post')\r\n   }\r\n}","import moment from 'moment'\r\nimport { db } from 'firestore/firebase-config'\r\nimport { TCreatePost, IFormProps } from 'admin/types/types'\r\nimport { DbRoot } from 'types/types'\r\n\r\n\r\n// post: IFormProps\r\nexport const updatePost: (post: IFormProps, postId: string) => Promise<void> = async (post, postId) => {\r\n   try {\r\n      const updatedPost: TCreatePost = {\r\n         ...post,\r\n         date: moment().format('MMM Do YY'),\r\n      }\r\n      await db.doc(`${DbRoot.dbRoot}/${postId}`).update( updatedPost )\r\n      console.log('se actualizo')\r\n   } catch (error) {\r\n      console.warn('error updating post')\r\n   }\r\n}","import styled from 'styled-components'\r\nimport { memo } from 'react'\r\nimport { Form } from './components/Form'\r\nimport { IFormProps } from 'admin/types/types'\r\nimport { useForm } from 'hooks/useForm'\r\nimport { IPostCardWihoutId } from 'types/types'\r\nimport { Button } from 'components/ui/Button'\r\nimport { startDeletePost } from './CRUD/deletePost'\r\nimport { updatePost } from './CRUD/updatePost'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst RedButton = styled(Button)`\r\n   background: rgb(240, 40, 73);\r\n   color: ${({ theme }) => theme.palette.text_white};\r\n   margin: 0.5em auto;\r\n`\r\n\r\ninterface IProps {\r\n   post: IPostCardWihoutId\r\n   postId: string\r\n}\r\n\r\nexport const UpdatePostScreen: React.FC<IProps> = memo(({ post, postId }) => {\r\n   // This component waits for the <UpdateScreenLoading />\r\n   /* \r\n      when <UpdateScreenLoading /> fetch de post, this Component will be called and rendered\r\n      with the post values\r\n    */\r\n   // it is to initializate the form with values to update it or delete it\r\n   const history = useHistory()\r\n   const initialFormState: IFormProps = {\r\n      title: post.title,\r\n      content: post.content,\r\n      excerpt: post.excerpt,\r\n      imageUrl: post.imageUrl,\r\n      featured: 'false'\r\n   }\r\n\r\n   const [formValues, handleInputChange, reset] = useForm(initialFormState)\r\n\r\n   return (\r\n      <div>\r\n         <hr />\r\n         Update/Delete post screen\r\n         <hr />\r\n         <div style={{ textAlign: 'center' }}>\r\n            <RedButton\r\n               onClick={() => {\r\n                  startDeletePost(postId, history)\r\n               }}\r\n            >\r\n               Delete\r\n            </RedButton>\r\n         </div>\r\n         <Form\r\n            formValues={formValues}\r\n            handleInputChange={handleInputChange}\r\n            submitCallback={updatePost}\r\n            resetForm={reset}\r\n            postId={postId}\r\n         />\r\n      </div>\r\n   )\r\n})\r\n","import { UpdatePostScreen } from 'admin/UpdatePostScreen'\r\nimport { getPostById } from 'helpers/getPostById'\r\nimport { memo, useState, useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { IURLparams, IPostCardWihoutId } from 'types/types'\r\n\r\ninterface Props {}\r\n\r\nexport const UpdateScreenLoading: React.FC<Props> = memo(() => {\r\n\r\n   // here is loading the post, and then it will call the main <UpdatePostScreen />\r\n   // it is to initializate the form with values\r\n   const [postLoaded, setPostLoaded] = useState<IPostCardWihoutId | null>(null)\r\n   const params = useParams<IURLparams>()\r\n   useEffect(() => {\r\n      getPostById(params.postId).then(resp => {\r\n         const postRef = resp?.data() as IPostCardWihoutId\r\n         setPostLoaded(postRef)\r\n      })\r\n      window.scrollTo(0,0)\r\n   \r\n   }, [params.postId])\r\n   \r\n   if(!postLoaded) {\r\n      return <h3>Wait loading Post</h3>\r\n   }\r\n   return (\r\n      <div>\r\n         <UpdatePostScreen post={postLoaded} postId={params.postId} />\r\n      </div>\r\n   )\r\n})\r\n","import { Switch, Route, Redirect } from 'react-router-dom'\r\nimport { Layout } from 'admin/components/Layout'\r\nimport { CreatePostScreen } from 'admin/CreatePostScreen'\r\nimport { Paths } from 'admin/types/types'\r\nimport { AdminHeader } from 'admin/components/AdminHeader'\r\nimport { AdminSidebar } from 'admin/components/Sidebar'\r\nimport { UpdateScreenLoading } from 'admin/components/UpdateScreenLoading'\r\nimport { GridContainer, GridCol } from 'theme/grid'\r\n\r\n// TODO: Refactore and optimize AdminScreens, (success messages and error messages)\r\n// now is working opening the console\r\n\r\nexport const Router: React.FC = () => {\r\n   return (\r\n      <div>\r\n         <Layout>\r\n            <AdminHeader />\r\n            <GridContainer>\r\n               <GridCol tablet={8}>\r\n                  <Switch>\r\n                     <Route exact path={Paths.create} component={CreatePostScreen} />\r\n                     <Route exact path={Paths.update} component={UpdateScreenLoading} />\r\n                     <Redirect to={Paths.create} />\r\n                  </Switch>\r\n               </GridCol>\r\n               <GridCol tablet={4}>\r\n                  <div style={{marginLeft: '.75em'}}>\r\n                     <AdminSidebar />\r\n                  </div>\r\n               </GridCol>\r\n            </GridContainer>\r\n         </Layout>\r\n      </div>\r\n   )\r\n}\r\n","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import {\r\n   Redirect,\r\n   Route,\r\n} from 'react-router'\r\nimport { Paths } from 'admin/types/types'\r\n\r\ninterface RouteProps {\r\n   isAuthenticated: boolean\r\n   // component: React.ComponentType<any> | React.ComponentType<RouteComponentProps<any, StaticContext, unknown>> | undefined\r\n   component: any,\r\n   path: string\r\n}\r\n\r\nexport const PrivateRoute = ({\r\n   isAuthenticated,\r\n   component: Component,\r\n   path,\r\n   ...rest\r\n}: RouteProps) => {\r\n   return (\r\n      <Route\r\n         {...rest}\r\n         component={(props: any) =>\r\n            isAuthenticated ? (\r\n               <Component {...props} />\r\n            ) : (\r\n               <Redirect to={Paths.login} />\r\n            )\r\n         }\r\n      />\r\n   )\r\n}\r\n","import { Route, Redirect } from 'react-router-dom';\r\nimport { Paths } from 'admin/types/types'\r\n\r\ninterface IProps {\r\n   isAuthenticated: boolean;\r\n   component: any;\r\n   path: string;\r\n   exact: boolean;\r\n}\r\n\r\nexport const PublicRoute: React.FC<IProps> = ({\r\n    isAuthenticated,\r\n    component: Component,\r\n    ...rest\r\n}) => {\r\n\r\n    return (\r\n        <Route { ...rest }\r\n            component={ (props: any) => (\r\n                ( !isAuthenticated )\r\n                    ? ( <Component { ...props } /> )\r\n                    : ( <Redirect to={Paths.create} /> )\r\n            )}\r\n        \r\n        />\r\n    )\r\n}\r\n","import { Button } from 'components/ui/Button'\r\nimport { useForm } from 'hooks/useForm'\r\nimport styled from 'styled-components'\r\nimport { startLogin } from './auth/login'\r\n// import { loguear } from './auth/login'\r\nimport { Layout } from './components/Layout'\r\n\r\nconst Container = styled.div`\r\n   display: flex;\r\n   justify-content: center;\r\n   align-items: center;\r\n   min-height: 86.6vh;\r\n`\r\n\r\nconst LoginDiv = styled.div`\r\n   background-color: ${({theme}) => theme.palette.themeMode.navbar_bg};\r\n   padding: 1em;\r\n   border-radius: 6px;\r\n   box-shadow: ${({theme}) => (theme.palette.dark) ? '0 0 4px 2px rgba(255,255,255,.5)' : '0 0 4px 2px rgba(0,0,0,.5)'};\r\n\r\n   h3 {\r\n      text-align: center;\r\n      margin-bottom: .8em;\r\n   }\r\n`\r\n\r\nconst Input = styled.input`\r\n   font-size: 1.02rem;\r\n   margin-bottom: .8em;\r\n`\r\n\r\nconst ButtonBlock = styled(Button)`\r\n   width: 100%;\r\n   margin-bottom: .8em;\r\n`\r\n\r\ninterface LoginForm {\r\n   email: string,\r\n   password: string\r\n}\r\n\r\nexport const LoginScreen: React.FC = () => {\r\n\r\n   const initialState: LoginForm = {\r\n      email: '',\r\n      password: '',\r\n   } \r\n\r\n   const [formValues, handleInputChange] = useForm(initialState)\r\n\r\n   const { email, password } = formValues \r\n\r\n   const handleLogin = (e: React.FormEvent<HTMLFormElement>) => {\r\n      e.preventDefault()\r\n      startLogin( email, password )\r\n      \r\n   }\r\n\r\n   return (\r\n      <Layout>\r\n         <Container>\r\n            <LoginDiv>\r\n               <h3>Login</h3>\r\n               <form onSubmit={handleLogin}>\r\n                  <div>\r\n                     <Input onChange={handleInputChange} value={email} autoComplete=\"off\" type=\"email\" placeholder=\"email\" name=\"email\" id=\"email\" />\r\n                  </div>\r\n                  <div>\r\n                     <Input onChange={handleInputChange} value={password} type=\"password\" placeholder=\"password\" name=\"password\" id=\"password\" />\r\n                  </div>\r\n                  <div>\r\n                     <ButtonBlock type=\"submit\">Login</ButtonBlock>\r\n                  </div>\r\n               </form>\r\n               {/* <ButtonBlock onClick={loguear}>Loguearse hardcoded</ButtonBlock> */}\r\n            </LoginDiv>\r\n         </Container>\r\n      </Layout>\r\n   )\r\n}\r\n","import { firebase } from 'firestore/firebase-config'\r\n\r\nexport const startLogin = ( email: string, password: string ) => {\r\n   firebase\r\n      .auth()\r\n      .signInWithEmailAndPassword(email, password)\r\n      .then()\r\n      .catch((err) => {\r\n         console.warn('??? bad login')\r\n      })\r\n}\r\n","import { Router } from 'admin/router/Router'\r\nimport { useEffect, useState, memo } from 'react'\r\nimport { Switch } from 'react-router-dom'\r\nimport { PrivateRoute } from './PrivateRoute'\r\nimport { firebase } from 'firestore/firebase-config'\r\nimport { PublicRoute } from './PublicRoute'\r\nimport { LoginScreen } from 'admin/LoginScreen'\r\n\r\n\r\nconst AdminRoute: React.FC = memo(() => {\r\n\r\n   const [checking, setChecking] = useState(true)\r\n\tconst [isLoggedIn, setIsLoggedIn] = useState(false)\r\n\r\n   useEffect(() => {\r\n\t\tfirebase.auth().onAuthStateChanged( (user) => {\r\n\t\t\tif(user?.uid) {\r\n            \r\n            setIsLoggedIn(true)\r\n\r\n\t\t\t} else {\r\n            setIsLoggedIn(false)\r\n\t\t\t}\r\n\t\t\tsetChecking(false)\r\n\t\t} )\r\n\t}, [])\r\n\r\n   \r\n   if( checking ) return <h2 style={{ paddingTop: '3.5rem'}}>checking...</h2>\r\n\r\n   return (\r\n      <Switch>\r\n         <PublicRoute exact path=\"/admin/login\" isAuthenticated={isLoggedIn} component={LoginScreen} />\r\n         <PrivateRoute path=\"/admin\" isAuthenticated={isLoggedIn} component={Router} />\r\n      </Switch>\r\n   )\r\n})\r\n\r\nexport default AdminRoute\r\n"],"sourceRoot":""}